Базы данных делятся на два основных типа:
- Реляционные (SQL)
- Нереляционные (NoSQL)

Реляционные БД хранят строго структурированные данные о каких-то сущностях бизнес логики приложения (самый наглядный пример: данные о пользователе, а именно, его имя,
фамилия, отчество, дата рождения, возраст и т.д.). Важно понимать, что такие таблицы содержащие данные по определенным сущностям имеют взаимосвязь между собой.

Нереляционные БД устроены немного по другому. Они хранят данные в иерархической системе (как JSON объект). Мы будем изучать только реляционные БД.

Существует несколько специальных норм по которым создаются реляционные базы данных. Ниже приведены основные из них:

1. Одна ячейка содержит одно значение
2. Каждая запись должна иметь уникальный первичный ключ (идентификатор (id))

Также ввиду того, что все сущности внутри реляционной БД связаны, существуют различные типы связей, такие как, one-to-many, one-to-one или many-to-many

* One-to-many:
Определенная сущность может быть несколько раз использована внутри другой таблицы. Одна сущность из одной таблицы ---(используется в)---> другой таблице в нескольких 
местах. Например, такой тип связи может быть актуален для ситуации, когда у нас есть таблица покупателей, и таблица совершенных покупок в магазине. Чтобы определять кто 
именно из покупателей совершал покупку во второй БД, нам необходимо использовать идентификатор из первой таблицы (конкретного одного покупателя) для каждой покупки 
которую он совершил. Соответственно, если у нас есть покупатели:

Покупатели:
(фамилия - id)

Иванов - id: 1
Петров - id: 2
Сидоров - id: 3

Чтобы использовать связь one-to-many, внутри таблицы покупок мы должны связать id покупателя с полем покупки

Покупки:
(id_покупки - id_покупателя)

1 покупка - 3
2 покупка - 1
3 покупка - 3
4 покупка - 2
5 покупка - 3

Т.е. ОДИН покупатель к МНОГИМ покупкам (one-to-many)

* One-to-one:
В данном типе связи, соотношение элементов таблиц, может быть только 1 к 1. Например, у одного человека имеется только один паспорт. В таком случае в главное таблице
"Люди" у каждого пользователя указывается поле "passport_id", связывающее его с конкретным паспортом из таблицы "Паспорта" 

Люди:
(id - фамилия - имя - отчество - passport_id)

1 - Иванов - Иван - Иванович - 2
2 - Сидоров - Сидор - Сидорович - 4


Паспорта:
(id - дата выдачи - серия - номер)

1 - 03.04.1998 - 1234 - 432312 
2 - 13.08.2011 - 7777 - 676767 (Это паспорт Иванова)
3 - 30.11.2014 - 6131 - 547149
4 - 13.02.2021 - 4627 - 053467  (Это паспорт Сидорова)

Т.е. ОДНО поле из первой таблицы ссылается на ОДНО поле из второй (one-to-one)

* Many-to-many
Данный тип связи актуален, когда у нас есть две базы данных, в которых каждое поле может быть связано с другим множеством полей из другой базы данных. Т.е., например, 
когда у нас есть таблица "Ученики" и "Учителя". Как у одного учителя может быть несколько учеников, так и у одного ученика может быть несколько учителей. В таких случаях
создается отдельная 3-я таблица "Учителя-Ученики" в которой сопоставляются id из полей ранее указанных таблиц.

Учителя:
(id - фамилия)

1 - Рахаева
2 - Гупалова
3 - Костина

Ученики:
(id - фамилия)

1 - Зайцев
2 - Волков
3 - Медведева
4 - Лисицина

Учителя-ученики:
(id_учителя - id_ученика)

1 - 2
1 - 4
2 - 1
2 - 3

Т.е. у преподавателя Рахаевой, обучаются Волков и Лисицина, у преподавателя Гупаловой обучаются Зайцев и Медведева, а у преподавателя Костиной учеников на данный момент 
нет.

В данном случае МНОГО полей первой таблицы связаны с МНОГИМИ полями из второй таблицы, и наоборот, МНОГО полей второй таблицы связаны с МНОГИМИ полями первой (many-to-many)

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Структура реляционной базы данных (таблицы):

В реляционных базах данных данные хранятся в связанных таблицах. Сами же таблицы состоят из стобцов (атрибутов/полей) и строк (записей), где атрибуты-столбцы содержат
определенные названия характеристик для каждой сущности таблицы, а в каждой строке описывается одна сущность в соответствии с набором атрибутов. Т.е.

Пользователи:
id  -   имя    -   фамилия  -   возраст                 (это столбцы - атрибуты)

7   -   Егор   -   Семёнов  -   23                      (а это строка описывающая сущность)



Каждый столбец имеет заранее определенный тип данных, которым может быть:
- VARCHAR (строковый тип данных)
- INTEGER (числовой тип данных)
- DATETIME (тип данных для даты и времени) и другие

Для того, чтобы узнать типы данных атрибутов можно выполнить SQL команду DESCRIBE и указать название таблицы или посмотреть схему базы данных.
DESCRIBE ShopUsers

Первичный ключ, т.е. id позволяет нам избежать неоднозначности при поиске данных в таблице (например, два одинаковых пользователя полные тёски, но при этом у них разный 
баланс на кошельке)

Ключевое поле (первичный ключ) – это поле (или набор полей), значение которого однозначно определяет запись в таблице.

Внешний ключ – это поле (или набор полей) в одной таблице, которое ссылается на первичный ключ в другой таблице (грубо говоря ячейка хранящая путь к следующему элементу
как в связных списках).

ВАЖНО: наличие первичного и внешнего ключа является необазательным, т.к. целостность данных может определяться на уровне приложения, а ссылаться от одной сущности к 
другим таблицым может быть ненужным.

Скриншот для наглядного представления внешнених и первичных ключей приложен к проекту.



SQL — язык структурированных запросов (SQL, Structured Query Language), который используется в качестве эффективного способа сохранения данных, поиска их частей, 
обновления, извлечения и удаления из базы данных.


