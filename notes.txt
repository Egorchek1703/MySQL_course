-----------------------------------------------------------------БАЗОВЫЙ СИНТАКСИ ЗАПРОС (SELECT)---------------------------------------------------------------------------

Часто при работе с БД нам необходимо вывести данные из какой-то таблицы. Для этого существует ключевое слово SELECT.
Важно заметить, что с помощью SELECT можно выводить обычные данные не содержащиеся в какой-либо таблице, например, запись

    -------------------------------------------------------------------------------
    SELECT "Привет мир!" 
    -------------------------------------------------------------------------------

выведет "Привет мир!".

Чтобы вывести все сущности и данные по ним, исходя из всех атрибутов (столбцов) таблицы, необходимо использовать знак *, ключевое слово FROM и название таблицы из 
которой мы хотим вывести данные.

    -------------------------------------------------------------------------------
    SELECT * FROM NazvanieTablici
    -------------------------------------------------------------------------------

Если необходимо вывести данные не по всем столбцам таблицы, а только по определенным, необходимо перечислить названия столбцов после ключевого слова SELECT через запятую
    
    -------------------------------------------------------------------------------
    SELECT name, age, phone FROM NazvanieTablici
    -------------------------------------------------------------------------------

СУБД выведет:

name   -   age    -    phone

Егор   -   23     -    +79157776677 
Гена   -   29     -    +79157667890
Никита -   29     -    +79451234567
и т.д.

Чтобы в результирующей таблице вывести столбцы с другими названиями, например, в примере выше, заменить название столбца phone на Phone_Number, нужно использовать алиасы
или по-другому псевдонимы. Для этого необходимо перед после записи названия столбца который мы хотим вывести и до запятой написать ключевое слово AS и желаемое название
для этого столбца.
    -------------------------------------------------------------------------------
    SELECT name, age, phone AS Phone_Number FROM NazvanieTablici
    -------------------------------------------------------------------------------

СУБД выведет:

name   -   age    -    Phone_Number

Егор   -   23     -    +79157776677 
Гена   -   29     -    +79157667890
Никита -   29     -    +79451234567
и т.д.

--------------------------------------------------------------------------------ЛИТЕРАЛЫ------------------------------------------------------------------------------------

Фиксирпованные значения называются "литералами". Основными типами литералов в MySQL являются:

- строковый
- числовой
- логический
- NULL
- литерал даты и времени

Строка — это последовательность символов, заключённых в одинарные (') или двойные (") кавычки. Например, 'это строка' и "это строка". Как и в JS внутри строк мы можем
экранировать различные символы, например, такие как табуляция и перенос строки. Экранорование задается символом "\".

\n - перенос строки
\t - символ табуляции

Числовой литерал включает в себя целые и дробные числа. Разделительный знак для дробного числа — «.» (точка). 
Может вклчюать только целую часть (10) или только дробную часть (.2) или обе вместе (10.2)
Может быть как положительным так и отрицательным числом, а также записываться с помощью "e" (в экспонинциальном виде) (1е4 = 10000)

Также для числовых литералов в MySQL существуют арифметические литералы:
%, MOD - деление по модулю (11 % 5 = 1)
DIV - целочисленное деление (10 DIV 4 = 2)
+, -, *, /, - стандартные арифметические операции

Значения даты и времени могут быть представлены в формате строки или числа. Поэтому если мы хотим задать какую-либо дату, мы можем сделать это двумя способами:
    - "2000-10-21"
    - 20001021
и в обоих случаях данные будут интерпритироваться как 21 октября 2000 года.

Также мы можем задавать дату отдельно от времени, время отдельно от даты и конечно же дату вместе с временем. Т.е. 
    "2000-10-21" - только дата
    "16:30:30" - только время (в формате hh:mm:ss)
    "2000-10-21 16:30:30" - и дата и время (разделены пробелом)
Важно отметить, что в каждом из этих случав разделитель можно опускать и также задавать с помощью числа, поэтому 20001021163030 будет восприниматься также как и 
"2000-10-21 16:30:30"

Логический литерал - значения TRUE и FALSE, означающие истинность и ошибочность какого-либо утверждения. При интерпретации запроса, MySQL преобразует их в числа: TRUE и 
FALSE становятся 1 и 0 соответственно.

Значение NULL означает "нет данных", "нет значения". Оно нужно, чтобы отличать визуально пустые значения, такие как строка нулевой длины или "пробел", от того, когда 
значения вообще нет, даже пустого.

-------------------------------------------------------------------------ПРИМИНЕНИЕ ФУНКЦИЙ---------------------------------------------------------------------------------

Составляю SQL запросы, мы можем использовать встроенные функции, например, если мы хотим вывести строку в верхнем регистре мы можем использовать функцию UPPER() и внутрь
нее в качестве параметра передать значение строки
    -------------------------------------------------------------------------------
    SELECT UPPER("Привет мир!") AS Result
    -------------------------------------------------------------------------------

СУБД выведет:

Result
ПРИВЕТ МИР!

Примеры фнукций:
NOW() - возвращает литерал в формате текущей даты (2024-05-11 23:41:16)
LENGTH("string") - возвращает длинну строки в числовом литерале (6)
LOWER("STRING") - возвращает строку, в которой все символы записаны в нижнем регистре (string)
YEAR("2000-10-21") - возвращает год, переданной в него в качестве параметра даты (2000)
INSTR(string, substring) - возвращает индекс символа с которого начинается субстрока внутри строки (индексирование идет не как обычно с нуля, а с 1)

Функции можно применять не только над литералами, но и над значениями, взятыми из таблицы. При этом функция выполняет преобразования для каждой строки отдельно.
Например, мы можем выводить определенные характеристики сущностей (столбцы) передавая внутрь функций названия столбцов, в котором находится значение которое мы хотим 
преобразовать, т.е.
    ------------------------------------------------------------------------------- 
    SELECT name, LENGTH(name) AS Name_Length FROM NazvanieTablici
    -------------------------------------------------------------------------------

СУБД выведет:

name    -   Name_Length

Егор    -   4
Аркадий -   7
Ян      -   2
и т.д.

Внутри вызова функций можно вызывать функции. Например, если мы хотим из строки "sql-academy" получить три левых заглавных символа, мы можем выполнить следующий запрос:
    -------------------------------------------------------------------------------
    SELECT UPPER(LEFT("sql-academy", 3)) AS str
    -------------------------------------------------------------------------------

СУБД выведет:

str
SQL

-----------------------------------------------------------------------ИСКЛЮЧЕНИЕ ДУБЛИКАТОВ (DISTINCT)---------------------------------------------------------------------

Например, у нас есть таблица данных в которой содержатся ученики находящиеся в данный момент в классе и их 10 человек. Эта таблица связана с таблицей всех учеников школы.
Если мы хотим узнать ученики каких классов сейчас находятся внутри аудитории (класса) мы используем запрос 
    -------------------------------------------------------------------------------
    SELECT class FROM Students_in_class
    -------------------------------------------------------------------------------

СУБД выведет:

9
9
9
8
7
9
4
8
9
7

Поскольку в одном классе возможно нахождение нескольких студентов, то не удивительно, что при выводе мы можем наблюдать одинаковые значения. Чтобы избежать дублирования
классов можно использовать атрибут [DISTINCT]
    -------------------------------------------------------------------------------
    SELECT [DISTINCT] поля_таблиц FROM наименование_таблицы;
    -------------------------------------------------------------------------------

При использовании DISTINCT для двух и более колонок, будут удаляться те записи которые одинаковы по всем колонкам к которым применен DISTINCT. Т.е. из таблицы

id - name - second_name

1 - Егор - Семёнов
2 - Егор - Ещекакойто
3 - Егор - Ещекакойто
4 - Сергей - Сергеев
5 - Сергей - Несергеев
6 - Сергей - Сергеев

Применив:
    -------------------------------------------------------------------------------
    SELECT DISTINCT name, second_name FROM NazvanieTablici;
    -------------------------------------------------------------------------------

мы сможем удалить дублирование Егор Ещекакойто и Сергей Сергеев, но не исключим Сергея и Егора имеющих другие фамилии. Т.е. СУБД выведет

Егор - Семёнов
Егор - Ещекакойто
Сергей - Сергеев
Сергей - Несергеев

--------------------------------------------------------------------------ОПЕРАТОР WHERE------------------------------------------------------------------------------------

Часто встречаются ситуации, когда нужно сделать выборку и отсеять ненужные сущности таблиц по определенному значению характеристики, например, отсеить всех студентов у
которых класс меньше восьмого. Для таких задач используется WHERE после которого следуюет условие для ограничения.

Таким образом запрос с "отсеиванием" может выглядеть следующим образом:

    -------------------------------------------------------------------------------
    SELECT * FROM Student
    WHERE first_name = "Grigorij" AND YEAR(birthday) > 2000;
    -------------------------------------------------------------------------------

СУБД выведет всех Григориев у которых год рождения больше чем 2000. Как видно из примера, для того чтобы связать несколько условий между ними нужно поставить "AND"

MySQL резульатом сравнивнения отображает 1, если сравнение верно (true) или 0, если сравнение неверно (false)

Операторы сравнения:

    = - если оба значения равны, то результат будет равен 1, иначе 0
    <=> - аналогичен оператору равенства, за исключением того, что результат будет равен 1 в случае сравнения NULL с NULL и 0 когда NULL сравнивается с чем-то кроме NULL
    <> или != - оператор неравенства, если значения не равны друг другу то выведет 1, а если равны 0
    < - меньше
    <= - меньше или равно
    > - больше
    >= - больше или равно

Результатом ПРОСТОГО сравнения любого значения с NULL является NULL. Исключением является использование оператора эквивалентности, в таком случае результат будет равен 0

Также для связывания условий внутри одного запроса существуют логические операторы. Мы ранее пользовались одним из них (AND)

Логические операторы:

    NOT - меняет значение оператора сравнения на противоположный (КАК ! В JS)
    OR - возвращает общее значение выражения истинно, если хотя бы одно из них истинно (ИЛИ "||")
    AND - возвращает общее значение истинно, только если оба выражения истинны (И "&&")
    XOR - озвращает общее значение выражения истинно, если один и только один аргумент является (ИЛИ где оба точно не верны (а верно только одно))

ВАЖНО: условное выражение с ключевым словом WHERE записываются после указания названия таблицы и атрибутов по которым мы хотим его отобразить. Т.е.
    -------------------------------------------------------------------------------
    SELECT * FROM Trip
    WHERE plane = 'Boeing' AND NOT town_from = 'London';
    -------------------------------------------------------------------------------